#include "arduino_secrets.h"
// Adafruit PWM Servo Driver Library - Version: Latest 
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include <Arduino_MKRIoTCarrier.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/d5edc6be-a38d-4ec8-8ebc-a27cf3099b86 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float waterLevel;
  float xPosition;
  float yPosition;
  bool alarm;
  bool motionDetect;
  bool reset;
  bool waterPump;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
#define SERVO_FREQ 50 // Analog servos run at ~50 Hz updates
#define ServoX 0 // the left and right servo is on channel 0 of the PCA 9685
#define ServoY 1 // the up and down servo is on channel 1 of the PCA 9685
#define WaterRate 2 // actual rate 3.86
#define WaterAmount 500

int pir = A6;
bool pirState = LOW;
MKRIoTCarrier carrier;
//Colors
uint32_t colorGreen = carrier.leds.Color(0, 255, 0);  //GREEN 
uint32_t  colorRed = carrier.leds.Color(255, 0, 0);  //RED

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  //Initialize the MKR IoT carrier

  // Defined in thingProperties.h
  initProperties();
  CARRIER_CASE = false;
  carrier.begin();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
    while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Waiting For");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Connection...");
    delay(500);
  }
   carrier.display.fillScreen(ST77XX_BLACK); //black background
  carrier.display.setTextSize(4);
    carrier.display.setCursor(5, 90);
  carrier.display.println("Connected");
  pinMode(pir, INPUT);
   pwm.begin();
     /*
   * In theory the internal oscillator (clock) is 25MHz but it really isn't
   * that precise. You can 'calibrate' this by tweaking this number until
   * you get the PWM update frequency you're expecting!
   * The int.osc. for the PCA9685 chip is a range between about 23-27MHz and
   * is used for calculating things like writeMicroseconds()
   * Analog servos run at ~50 Hz updates, It is importaint to use an
   * oscilloscope in setting the int.osc frequency for the I2C PCA9685 chip.
   * 1) Attach the oscilloscope to one of the PWM signal pins and ground on
   *    the I2C PCA9685 chip you are setting the value for.
   * 2) Adjust setOscillatorFrequency() until the PWM update frequency is the
   *    expected value (50Hz for most ESCs)
   * Setting the value here is specific to each individual I2C PCA9685 chip and
   * affects the calculations for the PWM update frequency. 
   * Failure to correctly set the int.osc value will cause unexpected PWM results
   */
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(SERVO_FREQ);  // Analog servos run at ~50 Hz updates
  waterLevel = 500;

  delay(10);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
if (waterPump == true) {
waterLevel = waterLevel - WaterRate;
delay(1000);
}
pirState = digitalRead(pir);
 
  //checking if the PIR sensor has detected movement
  if (pirState == HIGH) {
    alarm = true;
    carrier.display.fillScreen(ST77XX_BLACK);
    carrier.display.setCursor(30, 100);
    carrier.display.setTextSize(3);
    String message = "Motion Detected!";
    carrier.leds.fill((colorRed), 0, 5);
    carrier.display.println(message);
    carrier.leds.show();
  }
  //Dashboard check
  //when the alarm has not been triggered and it is off
  if (alarm == false) {
    carrier.display.fillScreen(ST77XX_BLACK);
    carrier.display.setCursor(30, 100);
    carrier.display.setTextSize(3);
    String message = "Everything is good!";
    carrier.leds.fill((colorGreen), 0, 5);
    carrier.display.println(message);
    carrier.leds.show();
  }

  
}


/*
  Since XPosition is READ_WRITE variable, onXPositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onXPositionChange()  {
  pwm.setPWM(ServoX, 0, (int)xPosition);
}

/*
  Since YPosition is READ_WRITE variable, onYPositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onYPositionChange()  {
   pwm.setPWM(ServoY, 0, (int)yPosition);
}
/*
  Since WaterPump is READ_WRITE variable, onWaterPumpChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWaterPumpChange()  {
  if (waterPump == true) {
    carrier.Relay1.open();
  }
  else {
    carrier.Relay1.close();
  }
 
}



/*
  Since Reset is READ_WRITE variable, onResetChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onResetChange()  {
  waterLevel = 500;
}

/*
  Since MotionDetect is READ_WRITE variable, onMotionDetectChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotionDetectChange()  {
  // Add your code here to act upon MotionDetect change
}


/*
  Since Alarm is READ_WRITE variable, onAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAlarmChange()  {
  // Add your code here to act upon Alarm change
}